# Kelas abstrak Plant
class Plant:
    # Constructor untuk menginisialisasi objek tanaman dengan atribut dasar
    def __init__(self, name, water_needs, fertilizer_needs):
        self.name = name                   # Nama tanaman
        self.water_needs = water_needs     # Kebutuhan air dalam liter
        self.fertilizer_needs = fertilizer_needs  # Kebutuhan pupuk dalam kg
    
    # Metode grow adalah metode abstrak yang akan diimplementasikan oleh kelas turunan
    # Metode ini menunjukkan polimorfisme, di mana setiap jenis tanaman akan tumbuh dengan cara berbeda
    def grow(self):
        pass
        
    # Metode untuk menghitung kebutuhan air dan pupuk berdasarkan kondisi lingkungan
    def calculate_needs(self, rainfall, soil_moisture):
        # Jika curah hujan tinggi (>= 5mm), kebutuhan air dikurangi
        if rainfall >= 5:
            # Kebutuhan air = kebutuhan normal - setengah dari curah hujan (tapi minimal 0)
            needWater = max(0, self.water_needs - (rainfall * 0.5))
        else:
            # Jika curah hujan rendah, kebutuhan air tetap normal
            needWater = self.water_needs
            
        # Jika kelembaban tanah tinggi (>= 50%), kebutuhan pupuk dikurangi menjadi 80%
        if soil_moisture >= 50:
            fertilizerNeeds = self.fertilizer_needs * 0.8 
        else:
            # Jika kelembaban tanah rendah, kebutuhan pupuk tetap normal
            fertilizerNeeds = self.fertilizer_needs
            
        # Menyimpan hasil perhitungan ke dalam atribut objek
        self.needWater = needWater
        self.fertilizerNeeds = fertilizerNeeds
    
    # Metode untuk menampilkan kebutuhan air dan pupuk yang telah disesuaikan
    def show_needs(self):
        print(f"Adjusted Water Needs: {self.needWater} liters")
        print(f"Adjusted Fertilizer Needs: {self.fertilizerNeeds} kg")

# Kelas turunan RicePlant yang mewarisi dari kelas Plant
class RicePlant(Plant):
    # Constructor untuk tanaman padi
    def __init__(self):
        # Memanggil constructor dari kelas induk dengan nilai spesifik untuk padi
        super().__init__("Rice", 20, 5)  # Padi butuh 20L air dan 5kg pupuk
        
    # Implementasi metode grow untuk padi
    def grow(self):
        print(f"{self.name} is growing in the paddy field")

# Kelas turunan CornPlant yang mewarisi dari kelas Plant
class CornPlant(Plant):
    # Constructor untuk tanaman jagung
    def __init__(self):
        # Memanggil constructor dari kelas induk dengan nilai spesifik untuk jagung
        super().__init__("Corn", 25, 8)  # Jagung butuh 25L air dan 8kg pupuk
    
    # Implementasi metode grow untuk jagung
    def grow(self):
        print(f"{self.name} is growing in the farm")

# Fungsi untuk mensimulasikan kondisi cuaca dan pertumbuhan tanaman
def simulate_weather():
    # Kondisi lingkungan untuk padi
    rainfall_rice = 10      # Curah hujan 10mm
    soil_moisture_rice = 75 # Kelembaban tanah 75%
    
    # Kondisi lingkungan untuk jagung
    rainfall_corn = 2       # Curah hujan 2mm
    soil_moisture_corn = 40 # Kelembaban tanah 40%
    
    # Membuat objek padi dan mensimulasikan pertumbuhannya
    rice = RicePlant()
    rice.grow()  # Memanggil metode grow dari kelas RicePlant
    print(f"Weather Report: Rainfall = {rainfall_rice} mm, Soil Moisture = {soil_moisture_rice}%")
    rice.calculate_needs(rainfall_rice, soil_moisture_rice)  # Menghitung kebutuhan yang disesuaikan
    rice.show_needs()  # Menampilkan kebutuhan yang disesuaikan
    
    print("\n")  # Pemisah antara simulasi padi dan jagung
    
    # Membuat objek jagung dan mensimulasikan pertumbuhannya
    corn = CornPlant()
    corn.grow()  # Memanggil metode grow dari kelas CornPlant
    print(f"Weather Report: Rainfall = {rainfall_corn} mm, Soil Moisture = {soil_moisture_corn}%")
    corn.calculate_needs(rainfall_corn, soil_moisture_corn)  # Menghitung kebutuhan yang disesuaikan
    corn.show_needs()  # Menampilkan kebutuhan yang disesuaikan

# Menjalankan simulasi
simulate_weather()
